{"name":"Configur8","tagline":"","body":"Configur8 [![Build Status](https://travis-ci.org/daviddenton/configur8.svg)](https://travis-ci.org/daviddenton/configur8) [![Coverage Status](https://coveralls.io/repos/daviddenton/configur8/badge.svg?branch=master)](https://coveralls.io/r/daviddenton/configur8?branch=master) [![Download](https://api.bintray.com/packages/daviddenton/maven/configur8/images/download.svg) ](https://bintray.com/daviddenton/maven/configur8/_latestVersion) [ ![Watch](https://www.bintray.com/docs/images/bintray_badge_color.png) ](https://bintray.com/daviddenton/maven/configur8/view?source=watch)\r\n=========\r\n\r\nNano-library which provides the ability to define typesafe (!) Configuration templates for applications.\r\n\r\n###Concept:\r\nA ```Configuration``` is a set of named and typed ```Property``` instances, which are defined using a  ```ConfigurationTemplate```.\r\nEach defined Property can be set with a default value, or be blank with a requirement to be overridden. At runtime, the template is ```reified``` into a concrete ```Configuration``` object, but if any properties are missing this process will throw a ```Misconfiguration``` error.\r\n\r\nAssuming that the reification process is successful, property values can be retrieved in an (actually) type-safe manner, and are applied in the following descending order of precedence:\r\n\r\n1. Named environment property\r\n2. JVM system property\r\n3. Default value\r\n\r\n###Get it:\r\nAdd the following resolver and dependency to ```build.sbt```:\r\n```scala\r\nresolvers += \"JCenter\" at \"https://jcenter.bintray.com\"\r\nlibraryDependencies += \"io.github.daviddenton\" %% \"configur8\" % \"1.0.2\"\r\n```\r\n\r\n###See it:\r\nSee the [example code](https://github.com/daviddenton/configur8/tree/master/src/test/scala/examples).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}